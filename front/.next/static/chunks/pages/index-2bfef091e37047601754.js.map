{"version":3,"sources":["webpack://_N_E/./components/PostForm.js","webpack://_N_E/./pages/index.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js"],"names":["PostForm","dispatch","useDispatch","useSelector","state","post","imagePaths","addPostDone","useInput","text","onChangeText","setText","useEffect","onSubmitPost","useCallback","trim","alert","formData","FormData","forEach","p","append","type","ADD_POST_REQUEST","data","imageInput","useRef","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","UPLOAD_IMAGES_REQUEST","onRemoveImage","index","REMOVE_IMAGE","style","margin","encType","onFinish","TextArea","value","onChange","maxLength","placeholder","name","multiple","hidden","ref","onClick","float","htmlType","map","v","i","display","src","width","alt","Home","me","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","LOAD_POSTS_REQUEST","addEventListener","removeEventListener","AppLayout","PostCard","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/index-2bfef091e37047601754.js","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\nimport { Button, Form, Input } from 'antd';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const [text, onChangeText, setText] = useInput('');\r\n\r\n  // 글쓰기가 완료되면 text 초기화\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setText('');\r\n    }\r\n  }, [addPostDone])\r\n\r\n  const onSubmitPost = useCallback(() => {\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);\r\n    });\r\n    formData.append('content', text);\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const imageInput = useRef();\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log('images', e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    return dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    })\r\n  })\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmitPost}>\r\n      <Input.TextArea \r\n        value={text} \r\n        onChange={onChangeText}\r\n        maxLength={140}\r\n        placeholder=\"어떤 일이 있었나요?\"\r\n      />\r\n      <div>\r\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">짹짹</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths && imagePaths.map((v, i) => {\r\n          return (\r\n            <div key={v} style={{ display: 'inline-block' }}>\r\n              <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n              <div>\r\n                <Button onClick={onRemoveImage(i)}>제거</Button>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </Form>\r\n  )\r\n};\r\n\r\nexport default PostForm;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport wrapper from '../store/configureStore';\r\nimport axios from 'axios';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state) => state.post); \r\n\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n      alert(retweetError);\r\n    }\r\n  }, [retweetError]);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 400) {\r\n        if (hasMorePosts && !loadPostsLoading) {  // 다 불러왔거나, 불러오는 중이면 dispatch 안됨\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [hasMorePosts, loadPostsLoading]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n    </AppLayout>\r\n  )\r\n}\r\n\r\n// 프론트 서버에서 실행\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  console.log('getServerSideProps Start');\r\n  console.log(context.req.headers);\r\n  const cookie = context.req ? context.req.headers.cookie : '';   // 서버쪽으로 쿠키 전달\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) {  // 쿠키가 모든 서버에 공유되는 것 방지\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POSTS_REQUEST,\r\n  });\r\n  context.store.dispatch(END);\r\n  console.log('getServerSideProps End');\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n  "],"sourceRoot":""}