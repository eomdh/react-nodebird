{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  return axiosos.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000); // 서버가 없기 떄문에 비동기적인 효과\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","axiosos","post","logIn","action","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/DeokHyeon/Desktop/react-nodebird/front/sagas/user.js"],"sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport { \r\n  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \r\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n} from \"../reducers/user\";\r\n\r\nfunction logInAPI(data) {\r\n  return axiosos.post('/api/login', data)\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);  // 서버가 없기 떄문에 비동기적인 효과\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post('/api/signup')\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    // const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ])\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EACkBC,cADlB,EACkCC,cADlC,EAEEC,eAFF,EAEmBC,eAFnB,EAEoCC,eAFpC,EAGEC,eAHF,EAGmBC,eAHnB,EAGoCC,eAHpC,QAIO,kBAJP;;AAMA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EACtB,OAAOC,OAAO,CAACC,IAAR,CAAa,YAAb,EAA2BF,IAA3B,CAAP;AACD;;AAED,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;EACtB,IAAI;IACF;IACA,MAAMnB,KAAK,CAAC,IAAD,CAAX,CAFE,CAEkB;;IACpB,MAAME,GAAG,CAAC;MACRkB,IAAI,EAAEd,cADE;MAERS,IAAI,EAAEI,MAAM,CAACJ;IAFL,CAAD,CAAT;EAID,CAPD,CAOE,OAAOM,GAAP,EAAY;IACZ,MAAMnB,GAAG,CAAC;MACRkB,IAAI,EAAEb,cADE;MAERe,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;IAFZ,CAAD,CAAT;EAID;AACF;;AAED,SAASS,SAAT,GAAqB;EACnB,OAAOpB,KAAK,CAACa,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;EACjB,IAAI;IACF;IACA,MAAMzB,KAAK,CAAC,IAAD,CAAX;IACA,MAAME,GAAG,CAAC;MACRkB,IAAI,EAAEX;IADE,CAAD,CAAT;EAGD,CAND,CAME,OAAOY,GAAP,EAAY;IACZ,MAAMnB,GAAG,CAAC;MACRkB,IAAI,EAAEV,eADE;MAERY,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;IAFZ,CAAD,CAAT;EAID;AACF;;AAED,SAASW,SAAT,GAAqB;EACnB,OAAOtB,KAAK,CAACa,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUU,MAAV,GAAmB;EACjB,IAAI;IACF;IACA,MAAM3B,KAAK,CAAC,IAAD,CAAX;IACA,MAAME,GAAG,CAAC;MACRkB,IAAI,EAAER;IADE,CAAD,CAAT;EAGD,CAND,CAME,OAAOS,GAAP,EAAY;IACZ,MAAMnB,GAAG,CAAC;MACRkB,IAAI,EAAEP,eADE;MAERS,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;IAFZ,CAAD,CAAT;EAID;AACF;;AAED,UAAUa,UAAV,GAAuB;EACrB,MAAMzB,UAAU,CAACE,cAAD,EAAiBa,KAAjB,CAAhB;AACD;;AAED,UAAUW,WAAV,GAAwB;EACtB,MAAM1B,UAAU,CAACK,eAAD,EAAkBiB,MAAlB,CAAhB;AACD;;AAED,UAAUK,WAAV,GAAwB;EACtB,MAAM3B,UAAU,CAACQ,eAAD,EAAkBgB,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;EAClC,MAAMhC,GAAG,CAAC,CACRE,IAAI,CAAC2B,UAAD,CADI,EAER3B,IAAI,CAAC4B,WAAD,CAFI,EAGR5B,IAAI,CAAC6B,WAAD,CAHI,CAAD,CAAT;AAKD"},"metadata":{},"sourceType":"module"}