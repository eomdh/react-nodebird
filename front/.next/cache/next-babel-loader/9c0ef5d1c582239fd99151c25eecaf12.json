{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 이미지 업로드할 때 이미지 경로\n  singlePost: null,\n  hasMorePosts: true,\n  loadPostLoading: false,\n  // 단일 게시글 불러오기\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  //  모든 게시글 불러오기\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  // 게시글 추가\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  // 게시글 삭제\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  // 이미지 업로드\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  // 댓글 추가\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  // 게시글 좋아요\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  // 좋아요 취소\n  unlikePostDone: false,\n  unlikePostError: null,\n  retweetLoading: false,\n  // 리트윗\n  retweetDone: false,\n  retweetError: null\n};\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        draft.imagePaths = action.data;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.PostId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        break;\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"names":["produce","initialState","mainPosts","imagePaths","singlePost","hasMorePosts","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","retweetLoading","retweetDone","retweetError","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","error","concat","length","unshift","filter","v","id","PostId","i","post","find","Comments","Likers","push","UserId"],"sources":["C:/Users/DeokHyeon/Desktop/react-nodebird/front/reducers/post.js"],"sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],   // 이미지 업로드할 때 이미지 경로\r\n  singlePost: null,\r\n  hasMorePosts: true,\r\n  loadPostLoading: false, // 단일 게시글 불러오기\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  loadPostsLoading: false,  //  모든 게시글 불러오기\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,  // 게시글 추가\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false, // 게시글 삭제\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  uploadImagesLoading: false, // 이미지 업로드\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  addCommentLoading: false,  // 댓글 추가\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  likePostLoading: false, // 게시글 좋아요\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,   // 좋아요 취소\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  retweetLoading: false,  // 리트윗\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n// reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        draft.singlePost = action.data;\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = draft.mainPosts.concat(action.data);\r\n        draft.hasMorePosts = action.data.length === 10;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.imagePaths = [];\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesDone = false;\r\n        draft.uploadImagesError = null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        draft.imagePaths = action.data;\r\n        break;\r\n      case UPLOAD_IMAGES_FAILURE:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      case REMOVE_IMAGE:\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n        // };\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.PostId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading = true;\r\n        draft.retweetDone = false;\r\n        draft.retweetError = null;\r\n        break;\r\n      case RETWEET_SUCCESS:\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.retweetLoading = false;\r\n        draft.retweetDone = true;\r\n        break;\r\n      case RETWEET_FAILURE:\r\n        draft.retweetLoading = false;\r\n        draft.retweetError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}