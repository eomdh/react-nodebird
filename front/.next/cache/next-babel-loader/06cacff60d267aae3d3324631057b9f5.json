{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.id}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","axios","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","addCommentAPI","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/DeokHyeon/Desktop/react-nodebird/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport shortId from \"shortid\";\r\n\r\nimport { \r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.id}/comment`, data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ])\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}