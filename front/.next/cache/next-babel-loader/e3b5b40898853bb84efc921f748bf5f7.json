{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport AppLayout from '../components/AppLayout';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport wrapper from '../store/configureStore';\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 400) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          // 다 불러왔거나, 불러오는 중이면 dispatch 안됨\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [me && /*#__PURE__*/_jsx(PostForm, {}), mainPosts.map(post => /*#__PURE__*/_jsx(PostCard, {\n      post: post\n    }, post.id))]\n  });\n}; // 프론트 서버에서 실행\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log('getServerSideProps Start');\n  console.log(context.req.headers);\n  const cookie = context.req ? context.req.headers.cookie : ''; // 서버쪽으로 쿠키 전달\n\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    // 쿠키가 모든 서버에 공유되는 것 방지\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END);\n  console.log('getServerSideProps End');\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}