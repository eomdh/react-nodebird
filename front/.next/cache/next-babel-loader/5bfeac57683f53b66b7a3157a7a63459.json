{"ast":null,"code":"import React, { useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nimport { Button, Form, Input } from 'antd';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const [text, onChangeText, setText] = useInput(''); // 글쓰기가 완료되면 text 초기화\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onSubmitPost = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    return dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  });\n  return /*#__PURE__*/_jsxs(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmitPost,\n    children: [/*#__PURE__*/_jsx(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uC5B4\\uB5A4 \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"primary\",\n        style: {\n          float: 'right'\n        },\n        htmlType: \"submit\",\n        children: \"\\uC9F9\\uC9F9\"\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: imagePaths && imagePaths.map((v, i) => {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            display: 'inline-block'\n          },\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: `http://localhost:3065/${v}`,\n            style: {\n              width: '200px'\n            },\n            alt: v\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(Button, {\n              onClick: onRemoveImage(i),\n              children: \"\\uC81C\\uAC70\"\n            })\n          })]\n        }, v);\n      })\n    })]\n  });\n};\n\nexport default PostForm;","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useDispatch","useSelector","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","useInput","Button","Form","Input","PostForm","dispatch","imagePaths","addPostDone","state","post","text","onChangeText","setText","onSubmitPost","trim","alert","formData","FormData","forEach","p","append","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","onRemoveImage","index","margin","float","map","v","i","display","width"],"sources":["C:/Users/DeokHyeon/Desktop/react-nodebird/front/components/PostForm.js"],"sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\nimport { Button, Form, Input } from 'antd';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const [text, onChangeText, setText] = useInput('');\r\n\r\n  // 글쓰기가 완료되면 text 초기화\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setText('');\r\n    }\r\n  }, [addPostDone])\r\n\r\n  const onSubmitPost = useCallback(() => {\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);\r\n    });\r\n    formData.append('content', text);\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const imageInput = useRef();\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log('images', e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    return dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    })\r\n  })\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmitPost}>\r\n      <Input.TextArea \r\n        value={text} \r\n        onChange={onChangeText}\r\n        maxLength={140}\r\n        placeholder=\"어떤 일이 있었나요?\"\r\n      />\r\n      <div>\r\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">짹짹</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths && imagePaths.map((v, i) => {\r\n          return (\r\n            <div key={v} style={{ display: 'inline-block' }}>\r\n              <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n              <div>\r\n                <Button onClick={onRemoveImage(i)}>제거</Button>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </Form>\r\n  )\r\n};\r\n\r\nexport default PostForm;"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,EAAkDC,YAAlD,QAAsE,kBAAtE;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EACrB,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;EACA,MAAM;IAAEW,UAAF;IAAcC;EAAd,IAA8BX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA/C;EACA,MAAM,CAACC,IAAD,EAAOC,YAAP,EAAqBC,OAArB,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C,CAHqB,CAKrB;;EACAP,SAAS,CAAC,MAAM;IACd,IAAIc,WAAJ,EAAiB;MACfK,OAAO,CAAC,EAAD,CAAP;IACD;EACF,CAJQ,EAIN,CAACL,WAAD,CAJM,CAAT;EAMA,MAAMM,YAAY,GAAGrB,WAAW,CAAC,MAAM;IACrC,IAAI,CAACkB,IAAD,IAAS,CAACA,IAAI,CAACI,IAAL,EAAd,EAA2B;MACzB,OAAOC,KAAK,CAAC,aAAD,CAAZ;IACD;;IACD,MAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;IACAX,UAAU,CAACY,OAAX,CAAoBC,CAAD,IAAO;MACxBH,QAAQ,CAACI,MAAT,CAAgB,OAAhB,EAAyBD,CAAzB;IACD,CAFD;IAGAH,QAAQ,CAACI,MAAT,CAAgB,SAAhB,EAA2BV,IAA3B;IACAL,QAAQ,CAAC;MACPgB,IAAI,EAAExB,gBADC;MAEPyB,IAAI,EAAEN;IAFC,CAAD,CAAR;EAID,CAb+B,EAa7B,CAACN,IAAD,EAAOJ,UAAP,CAb6B,CAAhC;EAeA,MAAMiB,UAAU,GAAG7B,MAAM,EAAzB;EACA,MAAM8B,kBAAkB,GAAGhC,WAAW,CAAC,MAAM;IAC3C+B,UAAU,CAACE,OAAX,CAAmBC,KAAnB;EACD,CAFqC,EAEnC,CAACH,UAAU,CAACE,OAAZ,CAFmC,CAAtC;EAIA,MAAME,cAAc,GAAGnC,WAAW,CAAEoC,CAAD,IAAO;IACxCC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,CAAC,CAACG,MAAF,CAASC,KAA/B;IACA,MAAMC,aAAa,GAAG,IAAIhB,QAAJ,EAAtB;IACA,GAAGC,OAAH,CAAWgB,IAAX,CAAgBN,CAAC,CAACG,MAAF,CAASC,KAAzB,EAAiCG,CAAD,IAAO;MACrCF,aAAa,CAACb,MAAd,CAAqB,OAArB,EAA8Be,CAA9B;IACD,CAFD;IAGA,OAAO9B,QAAQ,CAAC;MACdgB,IAAI,EAAEvB,qBADQ;MAEdwB,IAAI,EAAEW;IAFQ,CAAD,CAAf;EAID,CAViC,EAU/B,EAV+B,CAAlC;EAYA,MAAMG,aAAa,GAAG5C,WAAW,CAAE6C,KAAD,IAAW,MAAM;IACjDhC,QAAQ,CAAC;MACPgB,IAAI,EAAEtB,YADC;MAEPuB,IAAI,EAAEe;IAFC,CAAD,CAAR;EAID,CALgC,CAAjC;EAMA,oBACE,MAAC,IAAD;IAAM,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAV,CAAb;IAAwC,OAAO,EAAC,qBAAhD;IAAsE,QAAQ,EAAEzB,YAAhF;IAAA,wBACE,KAAC,KAAD,CAAO,QAAP;MACE,KAAK,EAAEH,IADT;MAEE,QAAQ,EAAEC,YAFZ;MAGE,SAAS,EAAE,GAHb;MAIE,WAAW,EAAC;IAJd,EADF,eAOE;MAAA,wBACE;QAAO,IAAI,EAAC,MAAZ;QAAmB,IAAI,EAAC,OAAxB;QAAgC,QAAQ,MAAxC;QAAyC,MAAM,MAA/C;QAAgD,GAAG,EAAEY,UAArD;QAAiE,QAAQ,EAAEI;MAA3E,EADF,eAEE,KAAC,MAAD;QAAQ,OAAO,EAAEH,kBAAjB;QAAA;MAAA,EAFF,eAGE,KAAC,MAAD;QAAQ,IAAI,EAAC,SAAb;QAAuB,KAAK,EAAE;UAAEe,KAAK,EAAE;QAAT,CAA9B;QAAkD,QAAQ,EAAC,QAA3D;QAAA;MAAA,EAHF;IAAA,EAPF,eAYE;MAAA,UACGjC,UAAU,IAAIA,UAAU,CAACkC,GAAX,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;QACtC,oBACE;UAAa,KAAK,EAAE;YAAEC,OAAO,EAAE;UAAX,CAApB;UAAA,wBACE;YAAK,GAAG,EAAG,yBAAwBF,CAAE,EAArC;YAAwC,KAAK,EAAE;cAAEG,KAAK,EAAE;YAAT,CAA/C;YAAmE,GAAG,EAAEH;UAAxE,EADF,eAEE;YAAA,uBACE,KAAC,MAAD;cAAQ,OAAO,EAAEL,aAAa,CAACM,CAAD,CAA9B;cAAA;YAAA;UADF,EAFF;QAAA,GAAUD,CAAV,CADF;MAQD,CATc;IADjB,EAZF;EAAA,EADF;AA2BD,CA7ED;;AA+EA,eAAerC,QAAf"},"metadata":{},"sourceType":"module"}